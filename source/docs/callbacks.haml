%h1 callbacks

%p
  Mongoid supports the following callbacks:

  %ul
    %li <tt>after_initialize</tt>
    %li <tt>before_validation</tt>
    %li <tt>after_validation</tt>
    %li <tt>before_create</tt>
    %li <tt>around_create</tt>
    %li <tt>after_create</tt>
    %li <tt>before_update</tt>
    %li <tt>around_update</tt>
    %li <tt>after_update</tt>
    %li <tt>before_save</tt>
    %li <tt>around_save</tt>
    %li <tt>after_save</tt>
    %li <tt>before_destroy</tt>
    %li <tt>around_destroy</tt>
    %li <tt>after_destroy</tt>

%p
  Callbacks are available on any document, whether it is embedded within
  another document or not. Note that to be efficient, Mongoid only fires
  the callback of the document that the persistence action was executed on.
  This is that Mongoid aims to support large hierarchies and to handle
  optimized atomic updates callbacks can't be firing all over the document
  hierarchy.

:coderay
  #!ruby
  class Article
    include Mongoid::Document
    field :name, type: String
    field :body, type: String
    field :slug, type: String

    before_create :generate_slug

    protected
    def generate_slug
      self.slug = name.to_permalink
    end
  end

%p
  Callbacks are coming from <tt>ActiveModel</tt>, so you can use the new
  syntax as well:

:coderay
  #!ruby
  class Article
    include Mongoid::Document
    field :name, type: String

    set_callback(:save, :before) do |document|
      document.generate_slug
    end

    protected
    def generate_slug
      self.slug = name.to_permalink
    end
  end

%h1 observers

%p
  Observer classes respond to life cycle callbacks to implement trigger-like
  behavior outside the original class. This is a great way to reduce the
  clutter that normally comes when the model class is burdened with
  functionality that doesn't pertain to the core responsibility of the
  class. Mongoid's observers work similar to ActiveRecord's. Example:

:coderay
  #!ruby
  class ArticleObserver < Mongoid::Observer
    def after_save(article)
      Notifications.article("admin@do.com", "New article", article).deliver
    end
  end

%p
  Observers are available for any document, whether it is embedded within
  another document or not. See <a href="/docs/callbacks.html">callbacks</a> for
  the list of available callbacks.Note that to be efficient, Mongoid only fires
  the observers of the document that the persistence action was executed on.
  This is that Mongoid aims to support large hierarchies and to handle
  optimized atomic updates callbacks can't be firing all over the document
  hierarchy.

%h2 instantiation

%p
  Observers will not be invoked unless they are instantiated first. If you are
  using Rails, Mongoid will instantiate your observers automatically as long as
  you register them in your <tt>config/application.rb</tt> file like so:

:coderay
  #!ruby
  config.mongoid.observers = :article_observer, :audit_observer

%p
  If you're not using Rails, then you will have to load and register your
  observers directly with Mongoid and afterwards instruct Mongoid to instantiate
  them before they will work. Instantiating an observer registers it with its
  observed model(s) so they will need to be loaded beforehand.

:coderay
  #!ruby
  require 'article_observer'
  require 'audit_observer'
  Mongoid.observers = ArticleObserver, AuditObserver
  Mongoid.instantiate_observers

%h2 mapping

%p
  Observers will by default be mapped to the class with which they share a
  name. So CommentObserver will be tied to observing Comment, ProductManagerObserver
  to ProductManager, and so on. If you want to name your observer differently
  than the class you're interested in observing, you can use the Observer.observe
  class method which takes either the concrete class (Product) or a symbol for
  that class (:product). If an observer needs to watch more than one kind of object,
  this can be specified with multiple arguments.

:coderay
  #!ruby
  class AuditObserver < Mongoid::Observer
    observe :account, :balance

    def after_update(record)
      AuditTrail.new(record, "UPDATED")
    end
  end

