- content_for :head do
  %title Mongoid: Persistence

%h1 Persistence

%p
  Mongoid supports all expected <tt>CRUD</tt> operations for those familiar
  with other Ruby mappers like
  <a href="http://rubyonrails.org/">Active Record</a> or
  <a href="https://datamapper.org">Data Mapper</a>.
  What distinguishes Mongoid from other mappers for MongoDB is that the
  general persistence operations perform atomic
  updates on only the fields that have changed instead of writing the entire
  document to the database each time.

%p
  The persistence sections will provide examples on what database operation
  is performed when executing the documented command.

.page-nav
  %ul.nav.nav-pills
    %li= link_to "Standard", "#standard"
    %li= link_to "Atomic", "#atomic"
    %li= link_to "Safe Mode", "#safe_mode"

%section#standard
  %h2 Standard

  %p
    Mongoid's standard persistence methods come in the form of common methods
    you would find in other mapping frameworks. The following table is a cheat
    sheet with the method in Mongoid on the right, and the Moped driver operation
    on the left.

  .well
    %table
      %tr
        %td.samurai= image_tag "/images/samurai.png"
        %td.note
          Mongoid never persists the entire document at once unless it is new.
          It figures out what has changed, and only ever updates the changed
          items atomically.

  %table.table.table-bordered.table-striped
    %thead
      %tr
        %th Operation
        %th Mongoid
        %th Moped
    %tbody
      %tr
        %td.doc
          <code>Model.create</code>
          %p.doc
            %i Insert a document into the dataabase
        %td
          :coderay
            #!ruby
            Person.create(
              first_name: "Heinrich",
              last_name: "Heine"
            )

            Person.create(first_name: "Heinrich") do |doc|
              doc.last_name = "Heine"
            end
        %td
          :coderay
            #!ruby
            collections[:people].insert({
              first_name: "Heinrich",
              last_name: "Heine"
            })
      %tr
        %td
          <code>Model.create!</code>
          %p.doc
            %i
              Insert a document into the dataabase,
              raising an error if a validation error occurs.
        %td
          :coderay
            #!ruby
            Person.create!(
              first_name: "Heinrich",
              last_name: "Heine"
            )

            Person.create!(first_name: "Heinrich") do |doc|
              doc.last_name = "Heine"
            end
        %td
          :coderay
            #!ruby
            collections[:people].insert({
              first_name: "Heinrich",
              last_name: "Heine"
            })
      %tr
        %td
          <code>Model#save</code>
          %p.doc
            %i
              Saves the changed attributes to the database
              atomically, or insert the document if new. Can
              bypass validations if wanted.
        %td
          :coderay
            #!ruby
            person = Person.new(
              first_name: "Heinrich",
              last_name: "Heine"
            )
            person.save
            person.save(validate: false)

            person.first_name = "Christian Johan"
            person.save
        %td
          :coderay
            #!ruby
            collections[:people].insert({
              first_name: "Heinrich",
              last_name: "Heine"
            })

            collections[:people].find(...).
              update("$set" => { first_name: "Christian Johan" })
      %tr
        %td
          <code>Model#save!</code>
          %p.doc
            %i
              Saves the changed attributes to the database
              atomically, or insert the document if new. Will
              raise an error of validations fail.
        %td
          :coderay
            #!ruby
            person = Person.new(
              first_name: "Heinrich",
              last_name: "Heine"
            )
            person.save!

            person.first_name = "Christian Johan"
            person.save!
        %td
          :coderay
            #!ruby
            collections[:people].insert({
              first_name: "Heinrich",
              last_name: "Heine"
            })

            collections[:people].find(...).
              update("$set" => { first_name: "Christian Johan" })
      %tr
        %td
          <code>Model#update_attributes</code>
          %p.doc
            %i
              Update the provided attributes atomically.
        %td
          :coderay
            #!ruby
            person.update_attributes(
              first_name: "Jean",
              last_name: "Zorg"
            )
        %td
          :coderay
            #!ruby
            collections[:people].find(...).
              update("$set" => {
                first_name: "Jean",
                last_name: "Zorg"
              })
      %tr
        %td
          <code>Model#update_attributes!</code>
          %p.doc
            %i
              Update the attributes and raise an error if validation fails.
        %td
          :coderay
            #!ruby
            person.update_attributes!(
              first_name: "Jean",
              last_name: "Zorg"
            )
        %td
          :coderay
            #!ruby
            collections[:people].find(...).
              update("$set" => {
                first_name: "Jean",
                last_name: "Zorg"
              })
      %tr
        %td
          <code>Model#update_attribute</code>
          %p.doc
            %i
              Update a single attribute, bypassing validations.
        %td
          :coderay
            #!ruby
            person.update_attribute(:first_name, "Jean")
        %td
          :coderay
            #!ruby
            collections[:people].find(...).
              update("$set" => { first_name: "Jean" })
      %tr
        %td
          <code>Model#delete</code>
          %p.doc
            %i
              Deletes the document from the database without
              running callbacks.
        %td
          :coderay
            #!ruby
            person.delete
        %td
          :coderay
            #!ruby
            collections[:people].find(...).remove
      %tr
        %td
          <code>Model#destroy</code>
          %p.doc
            %i
              Deletes the document from the database while running
              destroy callbacks.
        %td
          :coderay
            #!ruby
            person.destroy
        %td
          :coderay
            #!ruby
            collections[:people].find(...).remove
      %tr
        %td
          <code>Model.delete_all</code>
          %p.doc
            %i
              Deletes all documents from the database that match the
              provided attributes. Does not run any callbacks.
        %td
          :coderay
            #!ruby
            Person.delete_all

            Person.delete_all(first_name: "Heinrich")
        %td
          :coderay
            #!ruby
            collections[:people].find.remove_all

            collections[:people].find(first_name: "Heinrich").
              remove_all
      %tr
        %td
          <code>Model.destroy_all</code>
          %p.doc
            %i
              Deletes all documents from the database that match the
              provided attributes. Runs each document's destroy
              callbacks
        %td
          :coderay
            #!ruby
            Person.destroy_all

            Person.destroy_all(first_name: "Heinrich")
        %td
          :coderay
            #!ruby
            collections[:people].find.remove_all

            collections[:people].find(first_name: "Heinrich").
              remove_all

%section#atomic
  %h2 Atomic Persistence

  %p
    Although Mongoid performs atomic operations under the covers by default,
    there may be cases where you want to do this explicitly without
    persisting other fields. Mongoid provides support for all of
    these operations as well.

    .well
      %table
        %tr
          %td.samurai= image_tag "/images/samurai.png"
          %td.note
            When executing atomic operations via these methods, no callbacks
            will ever get run, nor will any validations.

    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th Operation
          %th Mongoid
          %th Moped
      %tbody
        %tr
          %td.doc
            <code>Model#add_to_set</code><br/>
            %p.doc
              %i Performs an atomic $addToSet on the field.
          %td
            :coderay
              #!ruby
              person.add_to_set(:aliases, "Bond")
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$addToSet" => { aliases: "Bond" })
        %tr
          %td
            <code>Model#bit</code><br/>
            %p.doc
              %i Performs an atomic $bit on the field.
          %td
            :coderay
              #!ruby
              person.bit(:age, { and: 10, or: 12 })
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$bit" => { age: { and: 10, or: 12 }})
        %tr
          %td
            <code>Model#inc</code><br/>
            %p.doc
              %i Performs an atomic $inc on the field.
          %td
            :coderay
              #!ruby
              person.inc(:age, 1)
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$inc" => { age: 1 })
        %tr
          %td
            <code>Model#pop</code><br/>
            %p.doc
              %i Performs an atomic $pop on the field.
          %td
            :coderay
              #!ruby
              person.pop(:aliases, 1)
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$pop" => { aliases: 1 })
        %tr
          %td
            <code>Model#pull</code><br/>
            %p.doc
              %i Performs an atomic $pull on the field.
          %td
            :coderay
              #!ruby
              person.pull(:aliases, "Bond")
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$pull" => { aliases: "Bond" })
        %tr
          %td
            <code>Model#pull_all</code><br/>
            %p.doc
              %i Performs an atomic $pullAll on the field.
          %td
            :coderay
              #!ruby
              person.pull_all(:aliases, [ "Bond", "James" ])
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$pullAll" => { aliases: [ "Bond", "James" ]})
        %tr
          %td
            <code>Model#push</code><br/>
            %p.doc
              %i Performs an atomic $push on the field.
          %td
            :coderay
              #!ruby
              person.push(:aliases, "007")
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$push" => { aliases: "007" })
        %tr
          %td
            <code>Model#push_all</code><br/>
            %p.doc
              %i Performs an atomic $pushAll on the field.
          %td
            :coderay
              #!ruby
              person.push_all(:aliases, [ "007", "008" ])
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$pushAll" => { aliases: [ "007", "008" ]})
        %tr
          %td
            <code>Model#rename</code><br/>
            %p.doc
              %i Performs an atomic $rename on the field.
          %td
            :coderay
              #!ruby
              person.rename(:bday, :dob)
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$rename" => { "bday" => "dob" })
        %tr
          %td
            <code>Model#set</code><br/>
            %p.doc
              %i Performs an atomic $set on the field.
          %td
            :coderay
              #!ruby
              person.set(:name, "Tyler Durden")
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$set" => { name: "Tyler Durden" })
        %tr
          %td
            <code>Model#unset</code><br/>
            %p.doc
              %i Performs an atomic $unset on the field.
          %td
            :coderay
              #!ruby
              person.unset(:name)
          %td
            :coderay
              #!ruby
              collections[:people].find(...).
                update("$unset" => { name: 1 })

%section#safe_mode
  %h2 Safe Mode

  %p
    For cases when you want to persist with or without safe mode on a per-query
    basis you can use Mongoid's provided <code>#safely</code> and <code>#unsafely</code>
    methods. These can be prepended to any persistence operation Mongoid
    provides, and will automatically make the following command safe or unsafe.

  %h3 Persisting in Safe Mode

  %p
    When you are using the default configuration settings and Mongoid's
    <code>persist_in_safe_mode</code> option is false, you may persist a single
    operation in safe mode by overriding it with <code>#safely</code>.

  %p
    Using safely, you can have the following options:

  %ul
    %li <code>fsync</code>: Whether to perform an fsync.
    %li <code>w</code>: The number of nodes to write to before returning.
    %li <code>wtimeout</code>: The timeout value for writing to multiple nodes.

  :coderay
    #!ruby
    Person.safely.create(name: "Bond")
    Person.safely(w: 3).create!(name: "James")
    person.safely(fsync: true).inc(:aliases, 1)

  %h3 Persisting Without Safe Mode

  %p
    When you override the default configuration secodeings and Mongoid's
    <code>persist_in_safe_mode</code> option is true, you may persist a single
    operation without safe mode by overriding it with <code>#unsafely</code>.

  :coderay
    #!ruby
    Person.unsafely.create(name: "Bond")
    person.unsafely.save
    person.unsafely.add_to_set(:aliases, "Bond")
