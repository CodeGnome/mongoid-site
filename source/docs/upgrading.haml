- content_for :head do
  %title Mongoid: Upgrading

%h1 Upgrading

%p
  Use this as a reference when upgrading between Mongoid versions.
  You can always reference the
  <a href="http://github.com/mongoid/mongoid/blob/master/CHANGELOG.md">
  <code>CHANGELOG</code></a>
  for bug fixes, new features, and major changes between versions.

%h2 Upgrading to 2.4.0

%p
  No special changes are required.

%h2 Upgrading to 2.3.0

%p
  Active Model, MongoDB, and the MongoDB Ruby Driver requirements have been raised:

  %ul
    %li Active Model 3.1 is now the minimum requirement.
    %li MongoDB 2.0.0 is now the minimum requirement.
    %li MongoDB Ruby Driver, BSON versions 1.4.0 are the minimum.

%p
  For those using <code>#create</code>, <code>#create!</code>, and <code>#build</code> on
  associations that are subclassed and passing in types to these methods,
  the type now needs to be the third argument as mass assignment scoping is
  now supported in these methods:

:coderay
  #!ruby
  canvas.shapes.build({ x: 10, y: 10 }, as: :admin, Circle)
  canvas.shapes.create({ x: 10, y: 10 }, as: :admin, Circle)
  canvas.shapes.create!({ x: 10, y: 10 }, as: :admin, Circle)

%h2 Upgrading to 2.2.0

%p
  Previously when setting an embedded relation via attributes on the parent,
  Mongoid would persist the embedded relation regardless of whether the
  parent operation was a persistence operation or not. This is best shown with
  an example:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :name, type: String
    embeds_many :addresses
  end

  class Address
    include Mongoid::Document
    field :street, type: String
    embedded_in :person
  end

  # The following code would previously save the address with an atomic $push
  # immediately then the attributes were set.
  person.addresses_attributes = [ { :street => "High St." }]

%p
  Now Mongoid waits to persist the embedded documents until save is called on
  the parent, or if the attributes were set via update_attributes. The
  following are examples of calls and how they <i>now</i> behave:

:coderay
  #!ruby

  # Atomic $push of the new address.
  person.addresses << Address.new

  # Atomic $push of the new address.
  person.addresses.create

  # Atomic $push of the new address.
  person.addresses = [ Address.new ]

  # Atomic $push of the new address.
  person.addresses = []
  person.addresses = nil

  # No save, will be atomic $set when parent is saved.
  person.attributes = { :addresses => [ Address.new ] }

  # No save, will be atomic $set when parent is saved.
  person.addresses_attributes = [ { :street => "High St." }]

  # No save, will be atomic $unset when parent is saved.
  person.attributes = { :addresses => [] }
  person.attributes = { :addresses => nil }

  # No save, will be atomic $pull when parent is saved.
  person.addresses_attributes = [ { :_id => 1, :_destroy => true }]


%h2 Upgrading to 2.1.0

%p
  Mongoid now requires MongoDB 1.8.0 and higher.

%p
  Traditional master/slave support has been removed, you will need to switch
  to using replica sets instead.

%p
  Custom field serialization has changed. Please see
  <a href="http://github.com/mongoid/mongoid/blob/master/lib/mongoid/fields/serializable.rb">RDoc</a> for API.

%h2 Upgrading to 2.0.0

%p
  You may use the familiar Active Record macros for relational associations
  if it helps with understanding where the foreign keys are stored.

  %ul
    %li <code>has_many</code>
    %li <code>has_one</code>
    %li <code>belongs_to</code>
    %li <code>has_and_belongs_to_many</code>

%p
  The <code>id</code> method on <code>criteria</code> has been removed in favour of
  <code>for_ids</code>.

:coderay
  #!ruby
  Person.criteria.for_ids("4ab2bc4b8ad548971900005c")
  Person.criteria.for_ids(["4ab2bc4b8ad548971900005c", "..."])

%h2 Upgrading to 2.0.0.rc.1 +

%p
  Please note there are many changes in this upgrade - please take
  caution and be mindful of each item listed here. There were close to
  400 commits between beta 20 and rc 1, and was a COMPLETE REWRITE
  of all association code as well as refactorings and rewrites in many
  other areas.

%p
  Relational associations no longer autosave when the parent relation
  is created. Previously a save on a new document which had a
  references_many or references_one association loaded would save
  the relations on it's first save. In order to get this functionality
  back, an <code>autosave: true</code> option must be provided to the
  macro (This only applies to references_many and references_one):

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    references_many :posts, autosave: true
    references_one :game, autosave: true
  end

%p
  For relational many-to-many associations, the
  <code>stored_as: :array</code> option on references_many has been
  sacked. You will get an error on class load to change these to the
  new syntax:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    references_and_referenced_in_many :preferences
  end

%p
  Mongoid now validates all associated "child" relations by default,
  which is the opposite behaviour from the last release. You may
  remove any validates_associated definitions that do not require
  custom behaviour for the following relations:

  %ul
    %li <code>embeds_many</code>
    %li <code>embeds_one</code>
    %li <code>references_many</code>
    %li <code>references_one</code>

%p
  If you do NOT want the automatic validation on these relations, you
  can supply the definition with a <code>validate: false</code>
  option to turn it off:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    embeds_many :addresses, validate: false
  end

%p
  Criteria object are now immutable, and return a new object with each
  method call. Also, the following methods have been added:

  %ul
    %li <code>delete_all</code>
    %li <code>destroy_all</code>
    %li <code>create</code>

%p
  This allows for limited database update commands to happen off of
  a criteria object:

:coderay
  #!ruby
  Person.where(title: "Prince").create # => Creates one
  Person.where(:age.gt => 40).delete_all # => Delete all matching
  Person.where(:age.gt => 40).destroy_all # => Destroy all matching

%p
  Mongoid now supports <code>default_scope</code> in a limited capacity:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :name, type: String
    default_scope asc(:name)
  end

%p
  Mongoid now supports multiple additional database connections on a
  per-model basis. Note that the "databases" entry in the configuration
  is only for ADDITIONAL databases - the primary master still is
  configured as usual:

:coderay
  #!ruby
  defaults: &defaults
    host: localhost
    slaves:
      - host: localhost
        port: 27018
      - host: localhost
        port: 27019
    databases:
      secondary:
        database: secondary_config_test
        host: localhost
        post: 27020
        slaves:
          - host: localhost
            port: 27021
          - host: localhost
            port: 27022

%p
  To tell a model to persist to another database:

:coderay
  #!ruby
  class Business
    include Mongoid::Document
    set_database :secondary
  end

%p
  The <code>inverse_of</code> option is no longer required on any relation.

%p
  Mongoid now allows recursive embedded relationships through 2 simple
  macros:

:coderay
  #!ruby
  class Role
    include Mongoid::Document
    field :name, type: String
    recursively_embeds_many
  end

  role.parent_role # => Gets the parent.
  role.child_roles # => Gets the children.

  class Role
    include Mongoid::Document
    field :name, type: String
    recursively_embeds_one
  end

  role.parent_role # => Gets the parent.
  role.child_role # => Gets the child.

%p
  <code>:default_order</code> No longer functions on relations and is a known
  issue.

%p
  For third-party library developers, the internal Mongoid relation
  metadata has been revamped. Now when performing a
  <code>Document#reflect_on_association(name)</code> you will be returned a
  <code>Mongoid::Relations::Metadata</code> object, which now provides
  much more comprehensive information about the relation in question.

%h2 Upgrading to 2.0.0.beta.16 +

%p
  This version requires an upgrade to
  <a href="http://www.mongodb.org/downloads">MongoDB 1.6.0</a>.

%h2 Upgrading to 2.0.0.beta.15 +

%p
  If you had been using the class variable <code>include_root_in_json</code>
  for JSON serialization, this will no longer work. You will need to now
  use the global Mongoid configuration option of the same name in your
  <code>mongoid.yml</code> if you want to turn it on. (It now defaults to false.)

:coderay
  #!ruby
  defaults: &defaults
    include_root_in_json: true

%h2 Upgrading to 2.0.0.beta.14 +

%p
  The <code>accessible: false</code> option on fields has been
  removed in favor of <code>attr_accessible</code> and <code>attr_protected</code>.
  You will need to change those definitions in your models.

%p
  Note that gemcutter is sorting the gems funkily, so when upgrading
  Mongoid for now you will have to specify the exact version. If you are
  using bundler then it takes care of this for you. The gems in the way
  will get yanked soon.

%h2 Upgrading to 2.0.0.beta.11 +

%p
  The <code>Mongoid.use_object_ids</code> configuration option has been removed
  and will need to be removed from your mongoid.yml or configuration block.

%p
  If you had been using the default <code>String</code> representation of
  <code>BSON::ObjectID</code> as your ids, you will need to do one of the following
  options:

%p
  a) Tell each one of your models to use <code>Strings</code> as ids like so:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    identity type: String
  end

%p
  b) Migrate all your <code>String</code> ids over to <code>ObjectIDs</code> in your
  database. See <a href="http://gist.github.com/489098">This Gist</a> for an
  example script to do this. (Thanks Kyle Banker)

%h2 Upgrading to 2.0.0.beta.10 +

%p
  <code>Passenger</code> users who are using smart spawning must now remove
  their initializers with the reconnect on fork code. Mongoid now handles
  this for you.

%p
  <code>Unicorn</code> users who set <code>preload_app</code> to <code>true</code>
  must also delete their initializers with the reconnect on fork code.
  Mongoid now handles this for you as well.

