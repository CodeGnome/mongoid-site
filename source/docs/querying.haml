- content_for :head do
  %title Mongoid: Querying

%h1 Querying

%p
  One of MongoDB's greatest features is its ability to execute dynamic
  queries, which Origin abstracts in a familiar Arel-style DSL that
  Mongoid includes.

.page-nav
  %ul.nav.nav-pills
    %li= link_to "Queries", "#queries"
    %li= link_to "Queries + Persistence", "#query_plus"
    %li= link_to "Scoping", "#scoping"

%section#queryies
  %h2 Queries

  %p
    All queries in Mongoid are <code>Criteria</code>, which is a chainable and
    lazily evaluated wrapper to a MongoDB dynamic query. Criteria only
    touch the database when they need to, for example on iteration of the
    results, and when executed wrap a cursor in order to keep memory
    management and performance predictable.

  %h3 Queryable DSL

  %p
    Mongoid's main query DSL is provided by Origin. Any method that is available
    on an <code>Origin::Queryable</code> exists on a <code>Mongoid::Criteria</code>
    <i>as well as</i> off the model's class.

  :coderay
    #!ruby
    Band.where(name: "Depeche Mode")
    Band.
      where(:founded.gte => "1980-1-1").
      in(name: [ "Tool", "Deftones" ]).
      union.
      in(name: [ "Melvins" ])

  %p
    With each chained method on a criteria, a newly cloned criteria
    is returned with the new query added. This is so that with scoping
    or exposures, for example, the original queries are not modified
    and reusable.

  %p
    See the <a>Origin documentation</a> for a complete list of available commands.

  %h3 Additional Query Methods

  %p
    In addition to behaviour that Origin provides, Mongoid also has some helpful
    methods on criteria.

    %table.table.table-bordered.table-striped
      %thead
        %tr
          %th Description
          %th Syntax
      %tbody
        %tr
          %td.doc
            %p.doc
              %i Get a count of persisted documents.
          %td
            :coderay
              #!ruby
              Band.count
              Band.where(name: "Photek").count
        %tr
          %td.doc
            %p.doc
              %i
                Iterate over all documents in the collection.
          %td
            :coderay
              #!ruby
              Band.each do |band|
                p band.name
              end
        %tr
          %td.doc
            %p.doc
              %i
                Determine if any documents exist in the database. Will return
                true for 1 or more.
          %td
            :coderay
              #!ruby
              Band.exists?
              Band.where(name: "Photek").exists?
        %tr
          %td.doc
            %p.doc
              %i
                Find a document or multiple documents by their ids. Will raise
                an error by default if any of the ids do not match.
          %td
            :coderay
              #!ruby
              Band.find("4baa56f1230048567300485c")
              Band.find("4baa56f1230048567300485c", "4baa56f1230048567300485d")
              Band.where(name: "Photek").find("4baa56f1230048567300485c")
        %tr
          %td.doc
            %p.doc
              %i
                Find a document by the provided attributes, and if not found
                create and return a newly persisted one.
          %td
            :coderay
              #!ruby
              Band.find_or_create_by(name: "Depeche Mode")
        %tr
          %td.doc
            %p.doc
              %i
                Find a document by the provided attributes, and if not found
                initialize and return a new one.
          %td
            :coderay
              #!ruby
              Band.find_or_initialize_by(name: "Depeche Mode")
        %tr
          %td.doc
            %p.doc
              %i
                Get the first document. If no sort options are provided, Mongoid
                will add an ascending _id sort to the criteria.
          %td
            :coderay
              #!ruby
              Band.first
              Band.where(:members.with_size => 3).first
        %tr
          %td.doc
            %p.doc
              %i
                Get the last document. If no sort options are provided, Mongoid
                will add a descending _id sort to the criteria.
          %td
            :coderay
              #!ruby
              Band.last
              Band.where(:members.with_size => 3).last

  %h3 Eager Loading

  %p
    Mongoid provides a facility to eager load documents
    from relations to prevent the n+1 issue when
    iterating over documents with relation access. Eager loaded is supported on
    all relations with the exception of polymorphic <code>belongs_to</code>
    associations.

  :coderay
    #!ruby
    class Band
      include Mongoid::Document
      has_many :albums
    end

    class Album
      include Mongoid::Document
      belongs_to :band
    end

    Band.includes(:albums).each do |band|
      p band.album.name # Does not hit the database again.
    end

  .well
    %table
      %tr
        %td.samurai= image_tag "/images/samurai.png"
        %td.note
          In order for eager loading to work, the <a>Identity Map</a>
          must be enabled.

%section#query_plus
  %h2 Queries + Persistence

%section#scoping
  %h2 Scoping

  %h3 Named Scopes

  %h3 Default scopes
