- content_for :head do
  %title Mongoid: Indexing

%h1 Indexing

%p
  You can define indexes on documents using the index macro. Provide a name
  for the index along with a direction. For additional options, supply them
  in the options hash.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :ssn
    index ssn: 1, options: { unique: true }
  end

%p
  You can define indexes on embedded document fields as well.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    embeds_many :addresses
    index "addresses.street" => 1
  end

%p
  You can index on multiple fields and provide direction.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :first_name
    field :last_name
    index first_name: 1, last_name: 1, options: { unique: true }
  end

%p
  Indexes can be sparse:

  :coderay
    #!ruby
    class Person
      include Mongoid::Document
      field :ssn
      index ssn: -1, options: { sparse: true }
    end

%p
  Indexes can be run in the background in cases where they may take some time:

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :ssn
    index ssn: 1, options: { unique: true, background: true }
  end

%p
  For geospacial indexes, make sure the field you are indexing is an <tt>Array</tt>.

:coderay
  #!ruby
  class Person
    include Mongoid::Document
    field :location, type: Array
    index location: "2d", options: { min: 200, max: 200 }
  end

%p
  You can have Mongoid define indexes for you on "foreign key" fields for
  relational associations. This only works on the relation macro that the
  foreign key is stored on.

:coderay
  #!ruby
  class Comment
    include Mongoid::Document
    belongs_to :post, index: true
    has_and_belongs_to_many :preferences, index: true
  end

%p
  When you want to create the indexes in the database, use the provided rake task.

:coderay
  #!ruby
  rake db:mongoid:create_indexes

%p
  Mongoid also provides a rake task to delete non-defined indexes.

:coderay
  #!ruby
  rake db:mongoid:remove_indexes

%p
  Note that you must following standard Rails class and module naming and
  organization patterns in order for this to work properly with respect to
  namespacing and camel-casing.

:coderay
  #!ruby
  Model # must reside in /app/models/model.rb
  MyModel # must be in /app/models/my_model.rb
  MYModel # must be in /app/models/m_y_model.rb
  Namespaced::Model # must be in /app/models/namespaced/model.rb

%p
  If you want indexes autocreated when the model classes are loaded, add this
  configuration option to your mongoid.yml. Note this is <i>NOT</i> recommended for any
  production environment.

:coderay
  #!ruby
  defaults: &defaults
    autocreate_indexes: true
