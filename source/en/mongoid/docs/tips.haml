- content_for :head do
  %title Mongoid: Tips

%h1 Tips and FAQs

.page-nav
  .container
    %ul.nav.nav-pills
      %li= link_to "Ruby 1.9.3", "#ruby"
      %li= link_to "Count Performance", "#count_performance"
      %li= link_to "Reordering Embedded Docs", "#reorder_embedded"

%section#ruby
  %h2 Ruby 1.9.3

  %p
    Until 1.9.3, Ruby did not have a way to decode binary string data accurately
    for both big endian and little endian systems across all the data types used
    in the MongoDB wire protocol. All data sent via the wire protocal, as well
    as the BSON specification itself use little endian and the ability to decode
    32 bit and 64 bit signed longs and ints did not arrive in Ruby until this
    version. See <a href="http://ruby-doc.org/core-1.9.3/String.html#method-i-unpack">
    <code>String#unpack</code></a> and
    <a href="http://www.mongodb.org/display/DOCS/Mongo+Wire+Protocol">Mongo Wire Protocol</a>
    for more detailed information.

  %p
    What this means is that prior to 1.9.3, the data received back from big
    endian systems such as SPARC would get incorrect data decoded when receiving
    replys from the database. We have thus made 1.9.3 the minimum requirement
    to be able to support all architectures.

  %p
    For those of you on Heroku bamboo, you will need to do two things in order to
    run on 1.9.3 in your applications. First, you will need to upgrade to the
    Cedar stack, and then you will need to specify 1.9.3 as your Ruby in your
    application's <code>Gemfile</code>.
    See <a href="http://blog.heroku.com/archives/2012/5/9/multiple_ruby_version_support_on_heroku/">
    Multiple Rubies on Heroku</a> for instructions on making this migration.

%section#count_performance
  %h2 Count Performance

  %p
    MongoDB uses non counting B-Tree indexes which causes issuing count commands
    extremely slow when providing a selector with the command. For example:

  :coderay
    #!ruby
    Band.where(name: "Depeche Mode").count
    session[:bands].find(name: "Depeche Mode").count

  %p
    This doesn't affect queries on small data sets, but large data sets (millions
    od documents) can experience count queries in the neighborhood of seconds,
    which can easily cripple application performance.

    %ul
      %li See: <a href="http://jira.mongodb.org/browse/SERVER-1752">SERVER-1752</a>
      %li See: <a href="http://jira.mongodb.org/browse/SERVER-2274">SERVER-2274</a>

%section#reorder_embedded
  %h2 Reodering Embedded Documents

  %p
    Due to only a partially implemented feature in MongoDB, the <code>$</code>
    positional operator, it is not possible to accurately update embedded
    documents that are nested more than one level deep based on a query
    selector. For example:

  :coderay
    #!ruby
    session[:bands].find(
      "_id" => 1,
      "albums._id" => 2,
      "albums.tracks._id" => 3,
    ).update(
      "$set" => { "albums.$.tracks.$.name" => "Sober" }
    )

  %p
    The above query does not work, and is not possible in MongoDB. To get around
    this, Mongoid stores the index of the embedded documents in memory, and
    would execute the same query like so:

  :coderay
    #!ruby
    session[:bands].find(
      "_id" => 1,
      "albums._id" => 2,
      "albums.tracks._id" => 3,
    ).update(
      "$set" => { "albums.0.tracks.2.name" => "Sober" }
    )

  %p
    This works, however it comes with a caveat in that you cannot reorder your
    embedded documents in another process. If you were to do so, Mongoid would
    be updating the incorrect field. It is recommended until this is fixed that
    you sort your documents in memory and leave the underlying order untouched.
    See <a href="http://jira.mongodb.org/browse/SERVER-831">SERVER-831</a> for
    more information.
